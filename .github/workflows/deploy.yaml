name: Deploy
on:
  release:
    types: [published]

permissions: write-all

jobs:
  build:
    name: Build and push Docker image
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Tags
        id: tag
        uses: ildug/get-tag-action@v1

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push the Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          file: ./infrastructure/docker/Dockerfile
          push: true
          build-args: |
            CADRART_BUILD_VERSION=${{ steps.tag.outputs.version }}
            NPM_TOKEN=${{ secrets.NPM_TOKEN }}
          tags: |
            ghcr.io/manuszep/cadrart2025-frontend:latest
            ghcr.io/manuszep/cadrart2025-frontend:${{ steps.tag.outputs.version }}

  deploy:
    name: Deploy to staging environment
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Tags
        id: tag
        uses: ildug/get-tag-action@v1

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v3
        with:
          method: service-account
          k8s-url: ${{ secrets.KUBERNETES_URL }}
          k8s-secret: ${{ secrets.KUBERNETES_SECRET }}

      - name: Determine target environment
        id: target-env
        run: |
          # Get current production namespace from proxy service
          CURRENT_PROD_NAMESPACE=$(kubectl get service frontend-production -n cadrart-system -o jsonpath='{.spec.externalName}' 2>/dev/null | sed 's/\.svc\.cluster\.local//' | sed 's/frontend\.//' || echo "cadrart-a")

          # Determine target environment (opposite of current)
          if [[ "$CURRENT_PROD_NAMESPACE" == "cadrart-a" ]]; then
            TARGET_ENV="b"
            TARGET_NAMESPACE="cadrart-b"
          elif [[ "$CURRENT_PROD_NAMESPACE" == "cadrart-b" ]]; then
            TARGET_ENV="a"
            TARGET_NAMESPACE="cadrart-a"
          else
            # Default to environment 'a' if no specific environment detected
            TARGET_ENV="a"
            TARGET_NAMESPACE="cadrart-a"
          fi

          echo "target-env=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "target-namespace=$TARGET_NAMESPACE" >> $GITHUB_OUTPUT
          echo "current-prod=$CURRENT_PROD_NAMESPACE" >> $GITHUB_OUTPUT
          echo "Current production: $CURRENT_PROD_NAMESPACE"
          echo "Target environment: $TARGET_ENV"
          echo "Target namespace: $TARGET_NAMESPACE"

      - name: Create target namespace
        run: |
          kubectl create namespace ${{ steps.target-env.outputs.target-namespace }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Sync data from production to staging
        run: |
          # Checkout common repository for sync scripts
          git clone https://github.com/manuszep/cadrart2025-common.git /tmp/cadrart-common
          cd /tmp/cadrart-common/infrastructure/scripts
          chmod +x *.sh

          # Sync database and static volume
          ./sync-database.sh ${{ steps.target-env.outputs.current-prod }} ${{ steps.target-env.outputs.target-namespace }}
          ./sync-static-volume.sh ${{ steps.target-env.outputs.current-prod }} ${{ steps.target-env.outputs.target-namespace }}

      - name: Deploy to staging environment
        run: |
          # Use Kustomize to generate and apply configuration
          OVERLAY_DIR="infrastructure/kubernetes/overlays/environment-${{ steps.target-env.outputs.target-env }}"

          echo "Generating configuration with Kustomize..."
          kubectl kustomize $OVERLAY_DIR | kubectl apply -f -

          # Update the image tag
          echo "Updating image to: ${{ steps.tag.outputs.version }}"
          kubectl set image deployment/frontend frontend=ghcr.io/manuszep/cadrart2025-frontend:${{ steps.tag.outputs.version }} -n ${{ steps.target-env.outputs.target-namespace }}

      - name: Wait for deployment readiness
        run: |
          kubectl rollout status deployment/frontend -n ${{ steps.target-env.outputs.target-namespace }} --timeout=300s

      - name: Health check
        run: |
          # Wait a bit for the service to be fully ready
          sleep 10

          # Get the service IP/port for health check
          SERVICE_IP=$(kubectl get service frontend -n ${{ steps.target-env.outputs.target-namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")

          if [ -n "$SERVICE_IP" ]; then
            # Perform health check
            curl -f http://$SERVICE_IP:8080/ || exit 1
          else
            echo "Service IP not available, skipping health check"
          fi

      - name: Update staging proxy services
        run: |
          # Update staging proxy services to point to target namespace
          kubectl patch service frontend-staging -n cadrart-system --type='merge' -p="{\"spec\":{\"externalName\":\"frontend.${{ steps.target-env.outputs.target-namespace }}.svc.cluster.local\"}}"
          kubectl patch service backend-staging -n cadrart-system --type='merge' -p="{\"spec\":{\"externalName\":\"backend.${{ steps.target-env.outputs.target-namespace }}.svc.cluster.local\"}}"

      - name: Deployment summary
        run: |
          echo "## ðŸš€ Frontend Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.tag.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ steps.target-env.outputs.target-env }}" >> $GITHUB_STEP_SUMMARY
          echo "**Namespace:** ${{ steps.target-env.outputs.target-namespace }}" >> $GITHUB_STEP_SUMMARY
          echo "**Staging URL:** https://stg.ateliercadrart.com" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Current State:" >> $GITHUB_STEP_SUMMARY
          echo "  - Production (ateliercadrart.com) â†’ ${{ steps.target-env.outputs.current-prod }}" >> $GITHUB_STEP_SUMMARY
          echo "  - Staging (stg.ateliercadrart.com) â†’ ${{ steps.target-env.outputs.target-namespace }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the deployment at: **https://stg.ateliercadrart.com**" >> $GITHUB_STEP_SUMMARY
          echo "2. If tests pass, run the switch workflow in cadrart2025-common repository" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor the production environment after traffic switch" >> $GITHUB_STEP_SUMMARY

          echo "Deployment to ${{ steps.target-env.outputs.target-namespace }} completed successfully!"
          echo "Staging URL: https://stg.ateliercadrart.com"
          echo ""
          echo "Run the switch workflow in cadrart2025-common repository when ready to promote to production."
